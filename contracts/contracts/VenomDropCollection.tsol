pragma ever-solidity >=0.62.0;
pragma AbiHeader expire;
pragma AbiHeader pubkey;

import "./interfaces/IVenomDropCollection.tsol";
import "@itgold/everscale-tip/contracts/TIP4_1/TIP4_1Collection.sol";
import "./Nft.tsol";
import "./utils/Ownable.tsol";
import "./libraries/OwnableErrors.tsol";

contract VenomDropCollection is TIP4_1Collection, Ownable {
  uint static _id;
  address private _owner;
  uint private _maxSupply;
  MintStage[] private _mintStages;

  constructor(TvmCell codeNft, address owner) public TIP4_1Collection(codeNft) {
    tvm.accept();
    _transferOwnership(owner);
  }

  // PRIVATE FUNCTIONS

  function _mintNft() private {
    require(msg.value > 0.4 ever, 101);
    tvm.rawReserve(0, 4);

    uint256 id = uint256(_totalSupply);
    _totalSupply++;

    TvmCell codeNft = _buildNftCode(address(this));
    TvmCell stateNft = tvm.buildStateInit({ contr: Nft, varInit: { _id: id }, code: codeNft });
    new Nft{ stateInit: stateNft, value: 0, flag: 128 }(msg.sender, msg.sender, 0.3 ever);
  }

  // PUBLIC FUNCTIONS

  /**
   * @notice set the max supply for the collection
   */
  function setMaxSupply(uint maxSupply) public onlyOwner {
    _maxSupply = maxSupply;
  }

  /**
   * @notice Set all mint stages for the collection
   */
  function setMintStages(MintStage[] mintStages) public onlyOwner {
    // TODO: Add validations here
    _mintStages = mintStages;
  }

  // PUBLIC VIEWS

  /**
   * @notice get the max supply for the collection
   */
  function getMaxSupply() public view returns (uint256 maxSupply) {
    return _maxSupply;
  }

  /**
   * @notice get the mint stages for the collection
   */
  function getMintStages() public view returns (MintStage[] mintStages) {
    return _mintStages;
  }
}
