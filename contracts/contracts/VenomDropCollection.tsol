pragma ever-solidity >=0.62.0;
pragma AbiHeader expire;
pragma AbiHeader pubkey;

import "./structs/VenomDrop.tsol";
import "./interfaces/IVenomDropCollection.tsol";
import "@itgold/everscale-tip/contracts/TIP4_1/TIP4_1Collection.sol";
import "./Nft.tsol";
import "./utils/Ownable.tsol";
import "./libraries/Errors.tsol";

contract VenomDropCollection is TIP4_1Collection, Ownable {
  address static _creator;
  uint static _id;
  address private _owner;
  bool private _hasMaxSupply;
  uint private _maxSupply;
  MintStage[] private _mintStages;

  constructor(TvmCell codeNft, address owner) public TIP4_1Collection(codeNft) {
    tvm.accept();
    _transferOwnership(owner);
  }


  // TODO: Make those variables configurable by mint stage
  uint128 _remainOnNft = 0.3 ton;
  uint128 _mintNftValue = _remainOnNft + 0.1 ton;

  // UTILS

  /**
   * @notice Validate Mint Stages.
   *         The mint stages should not have date overlap.
   *
   * @param mintStages the list of mint stages
   */
  function _validateMintStages(MintStage[] mintStages) internal pure {
    uint256 numStages = mintStages.length;
    for (uint256 i = 0; i < numStages; i++) {
      MintStage mintStage = mintStages[i];

      require(mintStage.startTime > 0, Errors.START_DATE_SHOULD_BE_GREATER_THAN_ZERO);

      bool isLast = i == mintStages.length - 1;
      if (!isLast && mintStage.endTime == 0) {
        revert(Errors.ONLY_LAST_STAGE_CAN_HAVE_END_DATE_EQUAL_ZERO);
      }

      for (uint256 j = i + 1; j < numStages; j++) {
        MintStage nextStage = mintStages[j];
        require(nextStage.startTime > mintStage.endTime, Errors.INVALID_STAGES_TIMELINE);
      }
    }
  }

  function _getCurrentMintStage() private view returns (MintStage mintStage) {
    uint256 numStages = _mintStages.length;
    for (uint256 i = 0; i < numStages; i++) {
      MintStage stage = _mintStages[i];
      if (block.timestamp > stage.startTime && block.timestamp < stage.endTime) {
        return stage;
      }
    }
    revert(Errors.THERE_IS_NO_CURRENT_STAGE);
  }

  // INTERNAL FUNCTIONS

  function _invokeMint(
    address owner,
    uint32 amount,
    uint32 currentIteration
  ) internal pure virtual {
    if(currentIteration < amount) {
      VenomDropCollection(address(this)).mintNft{value: 0, flag: 128}(owner, amount, currentIteration);
    } else {
      owner.transfer({value: 0, flag: 128, bounce: false});
    }
  }

  // PUBLIC FUNCTIONS

  function mintNft(
    address owner,
    uint32 amount,
    uint32 currentIteration
  ) external virtual {
    // Ensure the collection has a mint stage available now
    _getCurrentMintStage();
    require(msg.sender == address(this), Errors.CALLER_IS_NOT_COLLECTION);
    require(!_hasMaxSupply || _totalSupply < _maxSupply, Errors.MAX_SUPPLY_EXCEEDED);
    tvm.rawReserve(0, 4);
    uint256 id = uint256(_totalSupply);
    _totalSupply++;

    TvmCell codeNft = _buildNftCode(address(this));
    TvmCell stateNft = tvm.buildStateInit({ contr: Nft, varInit: { _id: id }, code: codeNft });
    new Nft{ stateInit: stateNft, value: _mintNftValue, flag: 0 }(owner, owner, _remainOnNft);

    currentIteration++;
    _invokeMint(owner, amount, currentIteration);
  }

  /**
   * @notice set the max supply for the collection
   */
  function setHasMaxSupply(bool hasMaxSupply) public onlyOwner {
    _hasMaxSupply = hasMaxSupply;
  }

  /**
   * @notice set the max supply for the collection
   */
  function setMaxSupply(uint maxSupply) public onlyOwner {
    _maxSupply = maxSupply;
  }

  /**
   * @notice Set all mint stages for the collection
   */
  function setMintStages(MintStage[] mintStages) public onlyOwner {
    _validateMintStages(mintStages);
    _mintStages = mintStages;
  }

  /**
   * @notice Mint NFTs
   */
  function mint(uint32 amount) external view virtual {
    // Ensure the collection has a mint stage available now
   MintStage mintStage = _getCurrentMintStage();
    require(amount > 0, Errors.INVALID_MINT_QUANTITY);
    require(!_hasMaxSupply || _totalSupply + amount <= _maxSupply, Errors.MAX_SUPPLY_EXCEEDED);
    require(msg.value >= (_mintNftValue + mintStage.price) * amount, Errors.INSUFFICIENT_FUNDS);
    tvm.rawReserve(0, 4);
    _invokeMint(msg.sender, amount, 0);
  }


  /**
   * @notice Configure multiple contract options at a time
   */
  function multiconfigure(MultiConfigureOptions options) public onlyOwner {
    setHasMaxSupply(options.hasMaxSupply);
    setMaxSupply(options.maxSupply);
    setMintStages(options.mintStages);
  }

  // PUBLIC VIEWS

  /**
   * @notice returns true if the collecition is limited
   */
  function getHasMaxSupply() public view returns (bool hasMaxSupply) {
    return _hasMaxSupply;
  }

  /**
   * @notice get the max supply for the collection
   */
  function getMaxSupply() public view returns (uint256 maxSupply) {
    return _maxSupply;
  }

  /**
   * @notice get the mint stages for the collection
   */
  function getMintStages() public view returns (MintStage[] mintStages) {
    return _mintStages;
  }

  /**
   * @notice get the collection info
   */
  function getInfo() public view returns (CollectionInfo info) {
    return CollectionInfo({
      hasMaxSupply: getHasMaxSupply(),
      maxSupply: getMaxSupply(),
      totalSupply: _totalSupply,
      mintStages: getMintStages()
    });
  }
}
