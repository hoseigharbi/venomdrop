// SPDX-License-Identifier: MIT

/*
 * OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)
 * Modified version with the following changes:
 * - Added compatibility with ever-solidity
 * - Changed the concatAndHash to make it compatible with TVM and TON-Solidity-Compiler
 */

pragma ever-solidity >=0.62.0;
pragma AbiHeader expire;
pragma AbiHeader pubkey;

library MerkleProof {
    /**
     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree
     * defined by `root`. For this, a `proof` must be provided, containing
     * sibling hashes on the branch from the leaf to the root of the tree. Each
     * pair of leaves and each pair of pre-images are assumed to be sorted.
     */
    function verify(bytes32[] proof, bytes32 root, bytes32 leaf) internal returns (bool) {
      return processProof(proof, leaf) == root;
    }

    /**
     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up
     * from `leaf` using `proof`. A `proof` is valid if and only  if the rebuilt
     * hash matches the root of the tree. When processing the proof, the pairs
     * of leafs & pre-images are assumed to be sorted.
     *
     * _Available since v4.4._
     */
    function processProof(bytes32[] proof, bytes32 leaf) internal returns (bytes32) {
        bytes32 computedHash = leaf;
        for (uint256 i = 0; i < proof.length; i++) {
            computedHash = _hashPair(computedHash, proof[i]);
        }
        return computedHash;
    }

    function _hashPair(bytes32 a, bytes32 b) private returns (bytes32) {
        return a < b ? concatAndHash(a, b) : concatAndHash(b, a);
    }

    function concatAndHash(bytes32 a, bytes32 b) private returns (bytes32) {
      return bytes32(sha256(abi.encode(a, b).toSlice()));
    }

}
