pragma ever-solidity >=0.62.0;
pragma AbiHeader expire;
pragma AbiHeader pubkey;

import "@itgold/everscale-tip/contracts/TIP4_1/TIP4_1Collection.sol";
import "./Nft.tsol";
import "./utils/Ownable.tsol";
import "./libraries/OwnableErrors.tsol";

contract Collection is TIP4_1Collection, Ownable {

  address private _owner;
  uint private _maxSupply;
  address[] private _allowedVenomDrops;

  constructor(TvmCell codeNft, address owner, address[] allowedVenomDrops) public TIP4_1Collection(codeNft) {
    tvm.accept();
    _allowedVenomDrops = allowedVenomDrops;
    _transferOwnership(owner);
  }

  // UTILS

  /**
    * @dev Reverts if the sender is not the owner or the contract itself
    */
  function _checkOnlyOwnerOrSelf() internal view {
    if (
        _msgSender() != owner() && _msgSender() != address(this)
    ) {
        revert(OwnableErrors.CALLER_IS_NOT_THE_OWNER);
    }
  }

  // MODIFIERS

  modifier onlyOwnerOrSelf() {
      _checkOnlyOwnerOrSelf();
      _;
  }

  // PRIVATE FUNCTIONS

  function _mintNft() private {
    require(msg.value > 0.4 ever, 101);
    tvm.rawReserve(0, 4);

    uint256 id = uint256(_totalSupply);
    _totalSupply++;

    TvmCell codeNft = _buildNftCode(address(this));
    TvmCell stateNft = tvm.buildStateInit({ contr: Nft, varInit: { _id: id }, code: codeNft });
    new Nft{ stateInit: stateNft, value: 0, flag: 128 }(msg.sender, msg.sender, 0.3 ever);
  }

  // PUBLIC FUNCTIONS


  /**
   * @notice Set the list of allowed VenomDrop contracts
   */
  function setAllowedVenomDrops(
      address[] venomDropAddrs
  ) external onlyOwnerOrSelf {
      // clear the existing array
      delete _allowedVenomDrops;
      // push the elements of the new array
      for (uint i = 0; i < venomDropAddrs.length; i++) {
        // TODO: Verify if the address implements the VenomDrop interface or revert it
        _allowedVenomDrops.push(venomDropAddrs[i]);
      }
  }

  /**
    * @notice Sets the max token supply
    *
    * @param maxSupply The max supply to set
    */
  function setMaxSupply(uint256 maxSupply) external onlyOwnerOrSelf {
    _maxSupply = maxSupply;
  }
  
  // PUBLIC VIEWS

  /**
   *  
   */
  function getMaxSupply() public view returns (uint256 maxSupply) {
      return _maxSupply;
  }
}
