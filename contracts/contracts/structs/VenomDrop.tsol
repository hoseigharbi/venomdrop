pragma ever-solidity >=0.62.0;
pragma AbiHeader expire;
pragma AbiHeader pubkey;

/**
 * @notice The mint stage data struct
 *
 * @dev Ensure there is no date overlap.
 *      The startTime should be always greater than
 *      the endTime of the previous stage
 *
 * @param price                    The mint price per token. (Up to 18 bi of VENOM)
 * @param startTime                Start timestamp (Max date is February 7, 2106).
 *                                 startTime cannot be 0
 * @param endTime                  End timestamp (Max date is February 7, 2106)
 *                                 If endTime is 0 it means the stage has no end date
 *                                 and the mint is available until there is enough supply
 *                                 (Only the last stage can have endTime=0)
 * @param maxTotalMintableByWallet Maximum total number of mints (Up to 65,535)
 */
struct MintStage {
  uint64 price;
  uint32 startTime;
  uint32 endTime;
  uint16 maxTotalMintableByWallet;
}

/**
 * @notice The params used on allow list mint (also used to compose the Merkle Tree leaf node)
 *
 * @param price                    The mint price per token.
 * @param maxTotalMintableByWallet Maximum total number of mints a user is allowed.
 * @param startTime                The start time, ensure this is not zero.
 * @param endTime                  The end time, ensure this is not zero.
 * @param maxTokenSupplyForStage   The limit of token supply this stage can mint within.
 */
struct MintAllowListParams {
  uint256 price;
  uint256 maxTotalMintableByWallet;
  uint256 startTime;
  uint256 endTime;
  uint256 maxTokenSupplyForStage;
}


/**
  * @notice A struct to configure multiple contract options at a time
  */
struct MultiConfigureOptions {
  bool hasMaxSupply;
  uint256 maxSupply;
  MintStage[] mintStages;
}

/**
  * @notice A struct with all informations about the collection
  */
struct CollectionInfo {
  bool hasMaxSupply;
  uint256 maxSupply;
  uint256 totalSupply;
  MintStage[] mintStages;
}
